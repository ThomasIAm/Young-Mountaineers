// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package randomix.actions;

import java.util.Date;
import java.util.Map;
import java.util.Random;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaEnumValue;
import com.mendix.systemwideinterfaces.core.meta.IMetaEnumeration;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.webui.CustomJavaAction;

/**
 * Generate a specific entity with generated data. Pass the entity you want and this will create a new object and fill all of the primitive values with random data.
 * 
 * Supports:
 * - Strings
 * - Integers/Longs
 * - Decimals
 * - Date/times
 * - Booleans
 */
public class GenerateRandomizedEntity extends CustomJavaAction<IMendixObject>
{
	private java.lang.String EntityName;

	public GenerateRandomizedEntity(IContext context, java.lang.String EntityName)
	{
		super(context);
		this.EntityName = EntityName;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		IMetaObject meta = Core.getMetaObject(EntityName);
		IMendixObject obj = Core.instantiate(getContext(), EntityName);

		meta.getMetaPrimitives().forEach((primitive) -> {
			switch (primitive.getType()) {
			case AutoNumber:
				break;
			case Binary:
				break;
			case Boolean:
				obj.setValue(getContext(), primitive.getName(), generateRandomBoolean());
				break;
			case DateTime:
				obj.setValue(getContext(), primitive.getName(), generateRandomDate());
				break;
			case Decimal:
				obj.setValue(getContext(), primitive.getName(), generateRandomDecimal());
				break;
			case Enum:
				obj.setValue(getContext(), primitive.getName(), generateRandomEnumeration(primitive.getEnumeration()));
				break;
			case HashString:
				break;
			case Integer:
				obj.setValue(getContext(), primitive.getName(), generateRandomInteger());
				break;
			case Long:
				obj.setValue(getContext(), primitive.getName(), generateRandomLong());
				break;
			case String:
				obj.setValue(getContext(), primitive.getName(), generateRandomString(primitive.getLength()));
				break;
			default:
				break;

			}
		});
		return obj;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GenerateRandomizedEntity";
	}

	// BEGIN EXTRA CODE
	private java.lang.Boolean generateRandomBoolean() {
		Random random = new Random();
		return random.nextBoolean();
	}

	private Date generateRandomDate() {
		Random random = new Random();
		return new Date(random.nextInt() * 1000L);
	}

	private java.lang.String generateRandomString(int maxStringLength) {
		Random random = new Random();
		int leftLimit = 97; // letter 'a'
		int rightLimit = 122; // letter 'z'
		int targetStringLength = random.nextInt(maxStringLength);

		String generatedString = random.ints(leftLimit, rightLimit + 1).limit(targetStringLength)
				.collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();

		return generatedString;
	}

	private int generateRandomInteger() {
		Random random = new Random();

		return random.nextInt();
	}

	private java.lang.String generateRandomEnumeration(IMetaEnumeration enumeration) {
		Random random = new Random();

		Map<String, IMetaEnumValue> values = enumeration.getEnumValues();
		Object key = values.keySet().toArray()[random.nextInt(values.size())];

		IMetaEnumValue enumValue = values.get(key);
		return enumValue.getIdentifier();
	}

	private long generateRandomLong() {
		Random random = new Random();

		return random.nextLong();
	}

	private java.math.BigDecimal generateRandomDecimal() {
		Random random = new Random();

		return new java.math.BigDecimal(random.nextDouble()).multiply(new java.math.BigDecimal(50));
	}

	// END EXTRA CODE
}
